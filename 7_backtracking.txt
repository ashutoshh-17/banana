def solveNQueens(n: int):
    res = []
    board = [['.' for _ in range(n)] for _ in range(n)]

    def isSafe(row, col):
        for i in range(row):
            if board[i][col] == 'Q':
                return False

        i, j = row, col
        while i >= 0 and j < n:
            if board[i][j] == 'Q':
                return False
            i -= 1
            j += 1

        i, j = row, col
        while i >= 0 and j >= 0:
            if board[i][j] == 'Q':
                return False
            i -= 1
            j -= 1

        return True

    def backtrack(row):
        if row == n:
            res.append([''.join(r) for r in board])
            return  

        for col in range(n):
            if isSafe(row, col):
                board[row][col] = 'Q'
                backtrack(row + 1)
                board[row][col] = '.'  

    backtrack(0)
    return res


def printSolutions(boards):
    for index, board in enumerate(boards):
        print(f"Solution {index + 1}")
        for row in board:
            print(' '.join(row))
        print()


if __name__ == "__main__":
    boards = solveNQueens(4)
    printSolutions(boards)
