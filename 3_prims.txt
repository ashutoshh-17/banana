def prim(adjacency_list):
    n = len(adjacency_list)
    visited = [False] * n
    mst_weight = 0
    mst_edges = []

    def find_min_edge():
        min_weight = float('inf')
        min_edge = None
        for u in range(n):
            if visited[u]:
                for v, weight in adjacency_list[u].items():
                    if not visited[v] and weight < min_weight:
                        min_weight = weight
                        min_edge = (u, v, weight)
        return min_edge

    visited[0] = True  
    
    for _ in range(n - 1):
        min_edge = find_min_edge()
        if min_edge is None:
            break
        u, v, weight = min_edge
        mst_edges.append((u, v, weight))
        mst_weight += weight
        visited[v] = True  

    print("MST Weight: ", mst_weight)
    print("MST Edges: ", mst_edges)


adjacency_list = [
    {1: 2, 3: 6},
    {0: 2, 2: 3, 3: 8, 4: 5},
    {1: 3, 4: 7},
    {0: 6, 1: 8, 4: 9},
    {1: 5, 2: 7, 3: 9}
]

if __name__ == '__main__':
    prim(adjacency_list)
